# ~/.profile
# Sourced by the command interpreter for login shells.


### Setting language ###########################################################

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8


### Homebrew packages path #####################################################

brew_packages_variables_export () {

  # Check that brew exist before continue
  command -v brew > /dev/null 2>&1 || { echo >&2 "Brew not installed. no package variable to export."; return; }
  BREW_PATH=`brew --prefix`

  # Check that Homebrewâ€™s install path exist before continue
  if [ ! -d "$BREW_PATH" ]; then
    return
  fi

  # Coreutils
  if [[ -d "$BREW_PATH/opt/coreutils/libexec" ]]; then
    export PATH="$BREW_PATH/opt/coreutils/libexec/gnubin:$PATH"
    export MANPATH="$BREW_PATH/opt/coreutils/libexec/gnuman:$MANPATH"
  fi

  # Python
  if [[ -d "$BREW_PATH/opt/python/libexec/bin" ]]; then
    export PATH="$BREW_PATH/opt/python/libexec/bin:$PATH"
    export PYTHON_USER_BASE=`python -m site --user-base`
    export PYTHON_USER_SITE=`python -m site --user-site`

    if [[ -d "$PYTHON_USER_BASE/bin" ]]; then
      export PATH="$PYTHON_USER_BASE/bin:$PATH"
    fi
  fi

  # Node
  local NODE_DIRECTTORY="$BREW_PATH/opt/node"
  if [[ -d "$NODE_DIRECTTORY" ]]; then
    NODE_BINARIES="$NODE_DIRECTTORY/bin"
    export PATH="$NODE_BINARIES:$PATH"
    export NODE_BINARY="$NODE_BINARIES/node"
    export LDFLAGS="-L$NODE_DIRECTTORY/lib"
    export CPPFLAGS="-I$NODE_DIRECTTORY/include"
  fi

  # Node version manager (nvm)
  nvm_load () {
    if [[ -e "$BREW_PATH/opt/nvm" && -d "$HOME/.nvm" ]]; then
      export NVM_DIR="$HOME/.nvm"
      [ -s "$BREW_PATH/opt/nvm/nvm.sh" ] && source "$BREW_PATH/opt/nvm/nvm.sh"
      [ -s "$BREW_PATH/opt/nvm/etc/bash_completion" ] && source "$BREW_PATH/opt/nvm/etc/bash_completion"
      [ -s "$BREW_PATH/opt/nvm/etc/bash_completion.d/nvm" ] && source "$BREW_PATH/opt/nvm/etc/bash_completion.d/nvm"
    else
      echo "Can't find nvm in brew packages, you can install it using 'brew install nvm'"
    fi
  }

  # Ruby
  if [[ -d "$BREW_PATH/opt/ruby/bin" ]]; then
    export PATH="$BREW_PATH/opt/ruby/bin:$PATH"
    export LDFLAGS="-L$BREW_PATH/opt/ruby/lib"
    export CPPFLAGS="-I$BREW_PATH/opt/ruby/include"
    export PKG_CONFIG_PATH="$BREW_PATH/opt/ruby/lib/pkgconfig:$PKG_CONFIG_PATH"
  fi

  # RubyGems
  export GEM_PATH=`command -v gem 2> /dev/null`
  if [[ "$GEM_PATH" ]]; then
    # Default installation folder for binaries installed with gem
    export PATH="`$GEM_PATH env gemdir`/bin:$PATH"
  fi

  # Android development
  if [[ -d "$BREW_PATH/share/android-sdk" ]]; then
    export ANDROID_SDK_ROOT="$BREW_PATH/share/android-sdk"
    export ANDROID_HOME=$ANDROID_SDK_ROOT
    export PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/ndk-bundle:$PATH"
  fi

  # SQLite
  if [[ -d "$BREW_PATH/opt/sqlite" ]]; then
    export PATH="$BREW_PATH/opt/sqlite/bin:$PATH"
    export LDFLAGS="-L$BREW_PATH/opt/sqlite/lib $LDFLAGS"
    export CPPFLAGS="-I$BREW_PATH/opt/sqlite/include $CPPFLAGS"
    export PKG_CONFIG_PATH="$BREW_PATH/opt/sqlite/lib/pkgconfig:$PKG_CONFIG_PATH"
  fi
}

# Java home
java_home_export () {
  # Using java_home to check for installed java version
  command -v /usr/libexec/java_home > /dev/null 2>&1 || { echo >&2 "Can't process JAVA_HOME."; return; }

  JAVA_HOME_8=$(/usr/libexec/java_home -Fv1.8 2> /dev/null)
  JAVA_HOME_LATEST=$(/usr/libexec/java_home 2> /dev/null)

  # prefere java 8
  if [ "$JAVA_HOME_8" ]; then
    export JAVA_HOME=$JAVA_HOME_8
  elif [ "$JAVA_HOME_LATEST" ]; then
    export JAVA_HOME=$JAVA_HOME_LATEST
  fi
}


### Update $PATH ###############################################################

[ -d "/usr/local/sbin" ] && export PATH="/usr/local/sbin:$PATH"
[ -d "$HOME/bin" ] && export PATH="$HOME/bin:$PATH"

# brew packages
brew_packages_variables_export

# java_home
java_home_export


### Updating Prompt ############################################################

# Powerline
POWERLINE_BASH="$PYTHON_USER_SITE/powerline/bindings/bash/powerline.sh"
if [[ -s $POWERLINE_BASH ]]; then
  powerline-daemon -q
  POWERLINE_BASH_CONTINUATION=1
  POWERLINE_BASH_SELECT=1
  source $POWERLINE_BASH
fi
