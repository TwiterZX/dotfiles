# ~/.profile
# Sourced by the command interpreter for login shells.


### Setting language ###########################################################

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8


### Homebrew packages path #####################################################

brew_packages_path_export () {

  # Check that brew exist before continue
  command -v brew >/dev/null 2>&1 || { echo >&2 "Brew not installed. No need to process packages path."; return; }
  BREW_PATH=`brew --prefix`

  # Check that Homebrewâ€™s install path exist brefore continue
  if [ ! -d "$BREW_PATH" ]; then
    return
  fi

  # Coreutils
  if [[ -d "$BREW_PATH/opt/coreutils" ]]; then
    export PATH="$BREW_PATH/opt/coreutils/libexec/gnubin:$PATH"
    export MANPATH="$BREW_PATH/opt/coreutils/libexec/gnuman:$MANPATH"
  fi

  # Python
  if [[ -d "$BREW_PATH/opt/python/libexec/bin" ]]; then
    export PATH="$BREW_PATH/opt/python/libexec/bin:$PATH"

    PYTHON_BASE=`python -m site --user-base`
    if [[ -d "$PYTHON_BASE/bin" ]]; then
      export PATH="$PATH:$PYTHON_BASE/bin"
    fi
  fi

  # Node 10
  if [[ -d "$BREW_PATH/opt/node@10" ]]; then
    NODE_BINARIES="$BREW_PATH/opt/node@10/bin"
    export PATH="$NODE_BINARIES:$PATH"
    export NODE_BINARY="$NODE_BINARIES/node"
  fi

  # Ruby
  if [[ -d "$BREW_PATH/opt/ruby/bin" ]]; then
    export PATH="$BREW_PATH/opt/ruby/bin:$PATH"
    export LDFLAGS="-L$BREW_PATH/opt/ruby/lib"
    export CPPFLAGS="-I$BREW_PATH/opt/ruby/include"
  fi

  # RubyGems
  GEM_PATH=`command -v gem 2>/dev/null`
  if [[ "$GEM_PATH" ]]; then
    export PATH="`$GEM_PATH env gemdir`/bin:$PATH"
  fi

  # Android development
  if [[ -d "$BREW_PATH/share/android-sdk" ]]; then
    export ANDROID_SDK_ROOT="$BREW_PATH/share/android-sdk"
    export ANDROID_HOME=$ANDROID_SDK_ROOT
    export PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/ndk-bundle:$PATH"
  fi

  # SQLite
  if [[ -d "$BREW_PATH/opt/sqlite/bin" ]]; then
    export PATH="$BREW_PATH/opt/sqlite/bin:$PATH"
    export LDFLAGS="-L$BREW_PATH/opt/sqlite/lib $LDFLAGS"
    export CPPFLAGS="-I$BREW_PATH/opt/sqlite/include $CPPFLAGS"
    export PKG_CONFIG_PATH="$BREW_PATH/opt/sqlite/lib/pkgconfig"
  fi
}

# Java home
java_home_export () {
  # Using java_home to check for installed java version
  command -v /usr/libexec/java_home >/dev/null 2>&1 || { echo >&2 "Can't process JAVA_HOME."; return; }

  JAVA_HOME_8=$(/usr/libexec/java_home -Fv1.8 2>/dev/null)
  JAVA_HOME_LATEST=$(/usr/libexec/java_home 2>/dev/null)

  # prefere java 8
  if [ "$JAVA_HOME_8" ]; then
    export JAVA_HOME=$JAVA_HOME_8
  elif [ "$JAVA_HOME_LATEST" ]; then
    export JAVA_HOME=$JAVA_HOME_LATEST
  fi
}


### Update $PATH ###############################################################

# home binanries
if [ -d "$HOME/bin" ]; then
  export PATH="$HOME/bin:$PATH"
fi
export PATH="/usr/local/sbin:$PATH"

# brew packages
brew_packages_path_export

# java_home
java_home_export


### Updating Prompt ############################################################

# Powerline
POWERLINE_BASH="$(python -m site --user-site)/powerline/bindings/bash/powerline.sh"
if [[ -f $POWERLINE_BASH ]]; then
  powerline-daemon -q
  POWERLINE_BASH_CONTINUATION=1
  POWERLINE_BASH_SELECT=1
  source $POWERLINE_BASH
fi
